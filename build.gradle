apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: "org.sonarqube"

dependencies {
    // ALL
    implementation(project(':commons-android')) {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    implementation rootProject.ext.supportLibs.appCompat
    implementation rootProject.ext.supportLibs.customTabs
    implementation rootProject.ext.supportLibs.design
    implementation rootProject.ext.supportLibs.supportV4
    implementation rootProject.ext.gpsLibs.analytics
    implementation rootProject.ext.gpsLibs.basement // from commons-android
    implementation rootProject.ext.gpsLibs.location
    implementation rootProject.ext.gpsLibs.maps
    implementation rootProject.ext.gpsLibs.firebase_ads
    implementation rootProject.ext.gpsLibs.firebase_analytics
    implementation rootProject.ext.gpsLibs.firebase_core
    implementation(rootProject.ext.gpsLibs.firebase_crashlytics_aar) {
        transitive = true
    }
    implementation rootProject.ext.fbLibs.audienceNetwork
    implementation rootProject.ext.fbLibs.audienceNetworkMediation
    // DEBUG
    debugImplementation rootProject.ext.squareLibs.leakcanary
    debugImplementation rootProject.ext.squareLibs.leakcanary_support_fragment
    // RELEASE
    releaseImplementation rootProject.ext.squareLibs.leakcanary_no_op
    // TEST
    testImplementation rootProject.ext.squareLibs.leakcanary_no_op
    // DEBUG
    debugImplementation 'androidx.multidex:multidex:2.0.1'

    testImplementation rootProject.ext.jUnitLibs.jUnit
    testImplementation rootProject.ext.mockitoLibs.mockitoCore
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    Properties projectNameProperties = new Properties()
    projectNameProperties.load(new FileInputStream(file("project_name.properties")))

    def projectName = projectNameProperties["project.name"]

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("version.properties")))

    def useGooglePlayUploadKeysProperties = true
    // def useGooglePlayUploadKeysProperties = false // DEBUG

    Properties appSigningKeysProperties = new Properties()
    def appSigningKeysPropertiesFile = file("app-signing-release-keys.properties")
    if (appSigningKeysPropertiesFile.exists()) {
        appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
    } else {
        appSigningKeysPropertiesFile = file("../app-signing-release-keys.properties")
        if (appSigningKeysPropertiesFile.exists()) {
            appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
        }
    }

    Properties googlePlayUploadKeysProperties = new Properties()
    def googlePlayUploadKeysPropertiesFile = file("google-play-upload-keys.properties")
    if (googlePlayUploadKeysPropertiesFile.exists()) {
        googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
    } else {
        googlePlayUploadKeysPropertiesFile = file("../google-play-upload-keys.properties")
        if (googlePlayUploadKeysPropertiesFile.exists()) {
            googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
        }
    }

    def resValueFr = file("res/values-fr")

    defaultConfig {
        applicationId "org.mtransit.android"
        versionCode versionProperties['version.code'] as Integer
        versionName versionProperties['version.name']
        if (useGooglePlayUploadKeysProperties) {
            setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}_upload")
        } else {
            setProperty("archivesBaseName", "${projectName}_v${versionName}_r${versionCode}")
        }
        if (resValueFr.exists()) {
            resConfigs "en", "fr"
        } else {
            resConfigs "en"
        }
        minSdkVersion rootProject.ext.minSdkVersion
        // minSdkVersion 21 // DEBUG avoid using legacy multidex
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    signingConfigs {
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    storeFile file(googlePlayUploadKeysProperties['key.store'])
                    storePassword googlePlayUploadKeysProperties['key.store.password']
                    keyAlias googlePlayUploadKeysProperties['key.alias']
                    keyPassword googlePlayUploadKeysProperties['key.alias.password']
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    storeFile file(appSigningKeysProperties['key.store'])
                    storePassword appSigningKeysProperties['key.store.password']
                    keyAlias appSigningKeysProperties['key.alias']
                    keyPassword appSigningKeysProperties['key.alias.password']
                }
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "_DEBUG"

            // testCoverageEnabled false // DEBUG skip coverage report
            shrinkResources false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            multiDexEnabled true
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
            // https://docs.fabric.io/android/crashlytics/build-tools.html
            ext.alwaysUpdatedBuildId = false
            aaptOptions.cruncherEnabled = false
        }
        //noinspection GroovyMissingReturnStatement
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            }

            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        abortOnError true
        warningsAsErrors false
        ignoreWarnings false
        quiet false
        checkDependencies true // also check leaf modules
        // checkAllWarnings true // too slow for CI, can be enabled locally
        ignoreTestSources true
        warning 'InvalidPackage', //
                'ClickableViewAccessibility', //
                'MergeRootFrame', //
                'Overdraw', //
                'UselessParent', //
                'IconDensities',  //
                'RtlHardcoded'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        debug {
            java.srcDirs = ['srcDebug']
            resources.srcDirs = ['srcDebug']
            res.srcDirs = ['resDebug']
        }
        test {
            java.srcDirs = ['srcTest']
            resources.srcDirs = ['srcTest']
        }
        androidTest {
            java.srcDirs = ['srcAndroidTest']
            resources.srcDirs = ['srcAndroidTest']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
